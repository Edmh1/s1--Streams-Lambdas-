package practica;

public class Dia5 {
    public static void main(String[] args) {
        // ğŸ”¹ 1. Filtra los nombres que tengan exactamente 6 letras y contengan la letra "a"
        // ğŸ’¡ Resultado esperado: lista de nombres con 6 letras que contienen "a"

        // ğŸ”¹ 2. Convierte todos los nombres a minÃºsculas y elimÃ­nalos si aparecen mÃ¡s de una vez
        // ğŸ’¡ Resultado esperado: lista de nombres en minÃºscula sin duplicados

        // ğŸ”¹ 3. Agrupa los nombres por la Ãºltima letra
        // ğŸ’¡ Resultado esperado: Map<Character, List<String>> con clave como Ãºltima letra

        // ğŸ”¹ 4. Crea un Map<String, Integer> con el nombre y su longitud, sin duplicados
        // ğŸ’¡ Resultado esperado: {"Ana"=3, "Pedro"=5, ...}

        // ğŸ”¹ 5. Â¿CuÃ¡ntos nombres Ãºnicos comienzan con vocal?
        // ğŸ’¡ Resultado esperado: nÃºmero entero

        // ğŸ”¹ 6. ObtÃ©n una lista con los nombres Ãºnicos, en mayÃºsculas, ordenados alfabÃ©ticamente, que tengan mÃ¡s de 4 letras
        // ğŸ’¡ Resultado esperado: lista de nombres

        // ğŸ”¹ 7. Devuelve un mapa donde la clave es true si el nombre contiene la letra "i", y el valor es la lista correspondiente
        // ğŸ’¡ Resultado esperado: Map<Boolean, List<String>>

        // ğŸ”¹ 8. Calcula la suma total de las longitudes de los nombres que terminan en vocal
        // ğŸ’¡ Resultado esperado: entero (suma)

        // ğŸ”¹ 9. Agrupa los nombres por longitud y muestra solo los grupos cuya longitud sea impar
        // ğŸ’¡ Resultado esperado: Map<Integer, List<String>> solo con claves impares

        // ğŸ”¹ 10. Genera un resumen estadÃ­stico de la longitud de los nombres Ãºnicos
        // ğŸ’¡ Resultado esperado: IntSummaryStatistics (promedio, min, max, suma, count)

        // ğŸ”¹ 11. A partir de una lista de objetos Persona, agrÃºpalas por ciudad
        // ğŸ’¡ Resultado esperado: Map<String, List<Persona>> agrupadas por ciudad

        // ğŸ”¹ 12. Filtra los nÃºmeros impares mayores a 10 y calcula su producto
        // ğŸ’¡ Resultado esperado: entero (multiplicaciÃ³n acumulada)

        // ğŸ”¹ 13. Agrupa los nombres por su segunda letra (si existe)
        // ğŸ’¡ Resultado esperado: Map<Character, List<String>>

        // ğŸ”¹ 14. Convierte una lista de strings a formato tipo JSON: ["Ana","Pedro"] â†’ {"Ana", "Pedro"}
        // ğŸ’¡ Resultado esperado: String con formato {"Ana", "Pedro"}

        // ğŸ”¹ 15. Dado un Map<String, Integer> con nombres y edades, muestra solo los nombres con edad mayor a 30
        // ğŸ’¡ Resultado esperado: lista de Strings con nombres

    }
}
